// SOME OF THESE FUNCTIONS/MIXINS ARE BORROWED FROM BOOTSTRAP 4

// FUNCTIONS FOR BREAKPOINT WIDTHS

	// Minimum breakpoint width. Null for the smallest (first) breakpoint.
	@function breakpoint-min($name, $breakpoints: $grid-breakpoints) {
	  $min: map-get($breakpoints, $name);
	  @return if($min != 0, $min, null);
	}

	// Maximum breakpoint width. Null for the largest (last) breakpoint.
	@function breakpoint-max($name, $breakpoints: $grid-breakpoints) {
	  $next: breakpoint-next($name, $breakpoints);
	  @return if($next, breakpoint-min($next, $breakpoints) - 1px, null);
	}

// BREAKPOINTS

	@mixin make-container($gutters: $grid-gutter-widths) {
	  @each $breakpoint in map-keys($gutters) {
	    @include media-breakpoint-up($breakpoint) {
	      $gutter: map-get($gutters, $breakpoint);
	      padding-right: ($gutter / 2);
	      padding-left:  ($gutter / 2);
	    }
	  }
	}

// CONTAINERS
	// For each breakpoint, define the maximum width of the container in a media query
	@mixin make-container-max-widths($max-widths: $container-max-widths, $breakpoints: $grid-breakpoints) {
	  @each $breakpoint, $container-max-width in $max-widths {
	    @include media-breakpoint-up($breakpoint, $breakpoints) {
	      width: $container-max-width;
	      max-width: 100%;
	    }
	  }
	}

// COLUMNS
// Framework grid generation
//
// Used only by Bootstrap to generate the correct number of grid classes given
// any value of `$grid-columns`.

@mixin make-grid-columns($columns: $grid-columns, $gutter-widths: $grid-gutter-widths, $breakpoints: $grid-breakpoints) {
  // Common properties for all breakpoints
  %grid-column {
    position: relative;
    width: 100%;
    min-height: 1px; // Prevent columns from collapsing when empty

    /* Sets default padding for below breakpoint */
    padding-right: split_values($padding-base,'horizontal');
    padding-left: split_values($padding-base,'horizontal');
  }

  @each $breakpoint in map-keys($breakpoints) {
    $infix: breakpoint-infix($breakpoint, $breakpoints);

    // Allow columns to stretch full width below their breakpoints
    @for $i from 1 through $columns {
      .col#{$infix}-#{$i} {
        @extend %grid-column;
      }
    }
    .col#{$infix},
    .col#{$infix}-auto {
      @extend %grid-column;
    }

    @include media-breakpoint-up($breakpoint, $breakpoints) {
      // Provide basic `.col-{bp}` classes for equal-width flexbox columns
      .col#{$infix} {
        flex-basis: 0;
        flex-grow: 1;
        max-width: 100%;
      }
      .col#{$infix}-auto {
        flex: 0 0 auto;
        width: auto;
        max-width: none; // Reset earlier grid tiers
      }

      @for $i from 1 through $columns {
        .col#{$infix}-#{$i} {
          @include make-col($i, $columns);
        }
      }

      @for $i from 1 through $columns {
        .order#{$infix}-#{$i} {
          order: $i;
        }
      }

      @each $modifier in (pull, push) {
        @for $i from 0 through $columns {
          .#{$modifier}#{$infix}-#{$i} {
            @include make-col-modifier($modifier, $i, $columns)
          }
        }
      }

      // `$columns - 1` because offsetting by the width of an entire row isn't possible
      @for $i from 0 through ($columns - 1) {
        @if not ($infix == "" and $i == 0) { // Avoid emitting useless .offset-0
          .offset#{$infix}-#{$i} {
            @include make-col-offset($i, $columns)
          }
        }
      }
    }
  }
}

@mixin make-row($gutter-widths: $grid-gutter-widths, $breakpoints: $grid-breakpoints) {
  display: flex;
  flex-wrap: wrap;
  
  // Adjust margin based on screen size
  @each $breakpoint, $grid-gutter-width in $gutter-widths {
    @include media-breakpoint-between($breakpoint, breakpoint-next($breakpoint), $breakpoints) {
      margin-left: ($grid-gutter-width / -2);
      margin-right: ($grid-gutter-width / -2);
    }
  }
}

@mixin make-col-ready() {
  position: relative;
  // Prevent columns from becoming too narrow when at smaller grid tiers by
  // always setting `width: 100%;`. This works because we use `flex` values
  // later on to override this initial width.
  width: 100%;
  min-height: 1px; // Prevent collapsing
}

@mixin make-col($size, $columns: $grid-columns, $gutter-widths: $grid-gutter-widths, $breakpoints: $grid-breakpoints) {
  flex: 0 0 percentage($size / $columns);

  // Add a `max-width` to ensure content within each column does not blow out
  // the width of the column. Applies to IE10+ and Firefox. Chrome and Safari
  // do not appear to require this.
  max-width: percentage($size / $columns);

  // Adjust padding based on screen size
  @each $breakpoint, $grid-gutter-width in $gutter-widths {
    @include media-breakpoint-between($breakpoint, breakpoint-next($breakpoint), $breakpoints) {
      padding-right: ($grid-gutter-width / 2);
      padding-left:  ($grid-gutter-width / 2);
    }
  }
}

@mixin make-col-offset($size, $columns: $grid-columns) {
  margin-left: percentage($size / $columns);
}

@mixin make-col-push($size, $columns: $grid-columns) {
  left: if($size > 0, percentage($size / $columns), auto);
}

@mixin make-col-pull($size, $columns: $grid-columns) {
  right: if($size > 0, percentage($size / $columns), auto);
}

@mixin make-col-modifier($type, $size, $columns) {
  // Work around the lack of dynamic mixin @include support (https://github.com/sass/sass/issues/626)
  @if $type == push {
    @include make-col-push($size, $columns);
  } @else if $type == pull {
    @include make-col-pull($size, $columns);
  } @else if $type == offset {
    @include make-col-offset($size, $columns);
  }
}
